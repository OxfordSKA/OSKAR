variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DEBIAN_FRONTEND: "noninteractive"
  CUDA_ARCH: "8.0"
  CUDA_VISIBLE_DEVICES: 0
  CONTAINER_SCANNING_DISABLED: 'true'
  DEPENDENCY_SCANNING_DISABLED: 'true'

image: fdulwich/oskar-ci:cuda-12.6

stages:
  - build and test
  - scan
  - doc
  - publish

.reports: &ready_reports
  - mkdir -p build/reports/

build-test-debug:
  stage: build and test
  tags: [ska-gpu-a100]
  before_script:
    - *ready_reports
    - nvidia-smi
    - mkdir debug
    - cd debug/
    - cmake ../ -DCOVERAGE_REPORT=ON -DCUDA_ARCH=$CUDA_ARCH
  script:
    - make -j
    - ./apps/oskar_system_info
    - make coverage
  after_script:
    - mv debug/coverage.xml build/reports/code-coverage.xml
    - mv debug/coverage/ ./
  artifacts:
    paths:
      - build/
      - coverage/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/reports/code-coverage.xml

build-test-release:
  stage: build and test
  tags: [ska-gpu-a100]
  before_script:
    - *ready_reports
    # We need CMake >= 3.21.0 for the --output-junit option on CTest.
    - cmake --version
    - mkdir release
    - cd release/
    - cmake ../ -DCUDA_ARCH=$CUDA_ARCH
  script:
    - make -j
    - ./apps/oskar_system_info
    - ctest --output-junit unit-tests.xml
  after_script:
    - mv release/unit-tests.xml build/reports/
  artifacts:
    paths:
      - build/
    reports:
      junit: build/reports/unit-tests.xml

linting:
  stage: build and test
  before_script:
    - *ready_reports
    - apt install libomp-14-dev # Try to get headers right for clang-tidy.
    - mkdir release
    - cd release/
    - cmake ../ -DCUDA_ARCH=$CUDA_ARCH -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
  script:
    - echo "Running lint check"
    - run-clang-tidy -quiet '^(?:(?!extern/|test/).)*$\r?\n?' > clang-tidy.out
    - cat clang-tidy.out | ../cmake/clang-tidy-to-junit/clang-tidy-to-junit.py ../ > linting.xml
  after_script:
    - mv release/linting.xml build/reports/
  artifacts:
    paths:
      - build/

build-docs:
  stage: doc
  before_script:
    - mkdir build-docs && cd build-docs/
    - cmake ../
  script:
    - make doc_html
  artifacts:
    paths:
      - build-docs/docs/_build/html/
    expire_in: 3600 seconds

docker-release:
  stage: publish
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  variables:
    GIT_VERSION: $CI_COMMIT_SHORT_SHA
  before_script:
    - apk add make git
    - cd docker
    - echo $CAR_OCI_REGISTRY_PASSWORD | docker login --username $CAR_OCI_REGISTRY_USERNAME --password-stdin $CAR_OCI_REGISTRY_HOST
  script:
    - docker build -t artefact.skao.int/oskar-python3 -t artefact.skao.int/oskar-python3:$CI_COMMIT_TAG oskar-python3/
    - docker push artefact.skao.int/oskar-python3:$CI_COMMIT_TAG
  rules:
    - if: '$CI_COMMIT_TAG'

singularity-release:
  stage: publish
  before_script:
    - mkdir build-image && cd build-image/
    - cmake ../
    - export MY_VER=`cmake -LA -N . | grep OSKAR_VERSION_LONG | awk '{split($0,a,"="); print a[2]}'`
    - cd ../singularity/
  script:
    - singularity build OSKAR-${MY_VER}-Python3.sif Singularity.python3
    - mv OSKAR-${MY_VER}-Python3.sif ../
  artifacts:
    paths:
      - OSKAR-*.sif
    expire_in: 3600 seconds
# rules:
#   - if: '$CI_COMMIT_TAG'

mac-release:
  stage: publish
  tags: [saas-macos-medium-m1]
  image: macos-12-xcode-13
  before_script:
    - export MACOSX_DEPLOYMENT_TARGET="10.13"
    - export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
    # Install CMake and Qt 5 from Homebrew.
    - brew install wget
    - NONINTERACTIVE=1 arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    - (echo; echo 'eval "$(/usr/local/bin/brew shellenv)"') >> $HOME/.zprofile
    - eval "$(/usr/local/bin/brew shellenv)"
    # Install Qt dependencies from source.
    - arch -x86_64 brew install --build-from-source libpng freetype gettext glib jpeg-turbo giflib xz lz4 zstd libtiff webp
    - arch -x86_64 brew install cmake pcre2 qt@5 || true  # Ignore Homebrew errors.
    # Install HDF5 from source.
    - mkdir build-hdf5 && cd build-hdf5/
    - wget -O hdf5.tar.gz https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.14/hdf5-1.14.0/src/CMake-hdf5-1.14.0.tar.gz
    - mkdir hdf5-src
    - tar zxf hdf5.tar.gz -C hdf5-src --strip-components 2
    - arch -x86_64 cmake hdf5-src/hdf5-1.14.0/
      -DCMAKE_BUILD_TYPE=Release
      -DBUILD_SHARED_LIBS=ON
      -DBUILD_STATIC_LIBS=OFF
      -DBUILD_STATIC_EXECS=OFF
      -DBUILD_TESTING=OFF
      -DHDF5_BUILD_CPP_LIB=OFF
      -DHDF5_BUILD_EXAMPLES=OFF
      -DHDF5_BUILD_FORTRAN=OFF
      -DHDF5_BUILD_JAVA=OFF
      -DHDF5_BUILD_HL_LIB=OFF
      -DHDF5_BUILD_TOOLS=OFF
      -DHDF5_BUILD_HL_TOOLS=OFF
      -DHDF5_BUILD_HL_GIF_TOOLS=OFF
      -DHDF5_ENABLE_THREADSAFE=ON
      -DHDF5_ENABLE_SZIP_SUPPORT=OFF
      -DHDF5_ENABLE_Z_LIB_SUPPORT=OFF
      -DONLY_SHARED_LIBS=ON
      -DHDF5_DISABLE_COMPILER_WARNINGS=ON
      -DHDF5_NO_PACKAGES=ON
      -DCMAKE_INSTALL_PREFIX="$HOME/local"
      -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
    - make -j4 && make install
    - cd ../ && rm -rf build-hdf5/
    # Install casacore tables from source.
    - mkdir build-casacore && cd build-casacore/
    - wget -O casacore.tar.gz https://github.com/casacore/casacore/archive/v3.5.0.tar.gz
    - mkdir casacore-src
    - tar zxf casacore.tar.gz -C casacore-src --strip-components 1
    - arch -x86_64 cmake casacore-src/
      -DMODULE=tables
      -DBUILD_TESTING=OFF
      -DBUILD_DYSCO=OFF
      -DBUILD_PYTHON=OFF
      -DBUILD_PYTHON3=OFF
      -DUSE_FFTW3=OFF
      -DUSE_OPENMP=OFF
      -DUSE_HDF5=OFF
      -DUSE_READLINE=OFF
      -DUSE_THREADS=ON
      -DCMAKE_INSTALL_PREFIX="$HOME/local"
      -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
    - make -j4 && make install
    - cd ../ && rm -rf build-casacore/
    # Build OSKAR.
    - mkdir build-mac && cd build-mac/
    - arch -x86_64 cmake ../
      -DFIND_OPENCL=ON
      -DCMAKE_PREFIX_PATH="/usr/local/opt/qt5/;$HOME/local"
      -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
    - make -j4
  script:
    - make package
  allow_failure: true  # Allow failure, as macOS runners are in beta.
  artifacts:
    paths:
      - build-mac/*.dmg
    expire_in: 3600 seconds
# rules:
#   - if: '$CI_COMMIT_TAG'

pages:
  stage: publish
  image: alpine
  dependencies:
    - build-docs
    - build-test-debug
  script:
    - rm -rf public
    - mkdir -p public
    - mv coverage/ public/
    - mv build-docs/docs/_build/html/* public/
  artifacts:
    paths:
      - public
#    expire_in: never

# Create Gitlab CI badges from CI metrics
# https://developer.skao.int/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
include:
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/finaliser.gitlab-ci.yml"
